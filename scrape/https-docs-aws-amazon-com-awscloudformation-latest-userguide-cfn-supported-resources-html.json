{
    "apigateway": {
        "category": "Application Services",
        "resource_types": {
            "AWS::ApiGateway::Account": {},
            "AWS::ApiGateway::ApiKey": {},
            "AWS::ApiGateway::Authorizer": {},
            "AWS::ApiGateway::BasePathMapping": {},
            "AWS::ApiGateway::ClientCertificate": {},
            "AWS::ApiGateway::Deployment": {},
            "AWS::ApiGateway::DocumentationPart": {},
            "AWS::ApiGateway::DocumentationVersion": {},
            "AWS::ApiGateway::DomainName": {},
            "AWS::ApiGateway::GatewayResponse": {},
            "AWS::ApiGateway::Method": {},
            "AWS::ApiGateway::Model": {},
            "AWS::ApiGateway::RequestValidator": {},
            "AWS::ApiGateway::Resource": {},
            "AWS::ApiGateway::RestApi": {},
            "AWS::ApiGateway::Stage": {},
            "AWS::ApiGateway::UsagePlan": {},
            "AWS::ApiGateway::UsagePlanKey": {},
            "AWS::ApiGateway::VpcLink": {}
        },
        "search_terms": [
            "apigatewayapigateway",
            "apigateway",
            "Amazon API Gateway (API Gateway)",
            "ag"
        ],
        "service_label": "Amazon API Gateway (API Gateway)",
        "service_name": "apigateway"
    },
    "apigatewayv2": {
        "category": "Application Services",
        "resource_types": {
            "AWS::ApiGatewayV2::Api": {},
            "AWS::ApiGatewayV2::Authorizer": {},
            "AWS::ApiGatewayV2::Deployment": {},
            "AWS::ApiGatewayV2::Integration": {},
            "AWS::ApiGatewayV2::IntegrationResponse": {},
            "AWS::ApiGatewayV2::Model": {},
            "AWS::ApiGatewayV2::Route": {},
            "AWS::ApiGatewayV2::RouteResponse": {},
            "AWS::ApiGatewayV2::Stage": {}
        },
        "search_terms": [
            "apigatewayv2",
            "Amazon API Gateway V2 (API Gateway V2)",
            "apigatewayvapigatewayv",
            "agv"
        ],
        "service_label": "Amazon API Gateway V2 (API Gateway V2)",
        "service_name": "apigatewayv2"
    },
    "applicationautoscaling": {
        "category": "Compute",
        "resource_types": {
            "AWS::ApplicationAutoScaling::ScalableTarget": {},
            "AWS::ApplicationAutoScaling::ScalingPolicy": {}
        },
        "search_terms": [
            "applicationautoscaling",
            "Application Auto Scaling",
            "aas",
            "autoscaling"
        ],
        "service_label": "Application Auto Scaling",
        "service_name": "applicationautoscaling"
    },
    "appstream20": {
        "category": "Enterprise Applications",
        "resource_types": {
            "AWS::AppStream::DirectoryConfig": {},
            "AWS::AppStream::Fleet": {},
            "AWS::AppStream::ImageBuilder": {},
            "AWS::AppStream::Stack": {},
            "AWS::AppStream::StackFleetAssociation": {},
            "AWS::AppStream::StackUserAssociation": {},
            "AWS::AppStream::User": {}
        },
        "search_terms": [
            "appstream2.0",
            "appstream",
            "AppStream 2.0"
        ],
        "service_label": "AppStream 2.0",
        "service_name": "appstream20"
    },
    "appsync": {
        "category": "Mobile Services",
        "resource_types": {
            "AWS::AppSync::ApiKey": {},
            "AWS::AppSync::DataSource": {},
            "AWS::AppSync::GraphQLApi": {},
            "AWS::AppSync::GraphQLSchema": {},
            "AWS::AppSync::Resolver": {}
        },
        "search_terms": [
            "appsync",
            "AWS AppSync"
        ],
        "service_label": "AWS AppSync",
        "service_name": "appsync"
    },
    "athena": {
        "category": "Analytics",
        "resource_types": {
            "AWS::Athena::NamedQuery": {}
        },
        "search_terms": [
            "Amazon Athena",
            "athena"
        ],
        "service_label": "Amazon Athena",
        "service_name": "athena"
    },
    "batch": {
        "category": "Compute",
        "resource_types": {
            "AWS::Batch::ComputeEnvironment": {},
            "AWS::Batch::JobDefinition": {},
            "AWS::Batch::JobQueue": {}
        },
        "search_terms": [
            "AWS Batch",
            "batch"
        ],
        "service_label": "AWS Batch",
        "service_name": "batch"
    },
    "certificatemanager": {
        "category": "Security, Identity, and\n                        Compliance\n                     ",
        "resource_types": {
            "AWS::CertificateManager::Certificate": {}
        },
        "search_terms": [
            "cm",
            "AWS Certificate Manager (ACM)",
            "acm",
            "certificatemanager",
            "certificatemanageracm"
        ],
        "service_label": "AWS Certificate Manager (ACM)",
        "service_name": "certificatemanager"
    },
    "cloud9": {
        "category": "Developer Tools",
        "resource_types": {
            "AWS::Cloud9::EnvironmentEC2": {}
        },
        "search_terms": [
            "cloud",
            "AWS Cloud9",
            "cloud9"
        ],
        "service_label": "AWS Cloud9",
        "service_name": "cloud9"
    },
    "cloudfront": {
        "category": "Storage and Content Delivery",
        "resource_types": {
            "AWS::CloudFront::CloudFrontOriginAccessIdentity": {},
            "AWS::CloudFront::Distribution": {},
            "AWS::CloudFront::StreamingDistribution": {}
        },
        "search_terms": [
            "cloudfrontcloudfront",
            "Amazon CloudFront (CloudFront)",
            "cloudfront"
        ],
        "service_label": "Amazon CloudFront (CloudFront)",
        "service_name": "cloudfront"
    },
    "cloudmap": {
        "category": "Networking",
        "resource_types": {
            "AWS::ServiceDiscovery::HttpNamespace": {},
            "AWS::ServiceDiscovery::Instance": {},
            "AWS::ServiceDiscovery::PrivateDnsNamespace": {},
            "AWS::ServiceDiscovery::PublicDnsNamespace": {},
            "AWS::ServiceDiscovery::Service": {}
        },
        "search_terms": [
            "servicediscovery",
            "cm",
            "cloudmap",
            "AWS Cloud Map"
        ],
        "service_label": "AWS Cloud Map",
        "service_name": "cloudmap"
    },
    "codebuild": {
        "category": "Developer Tools",
        "resource_types": {
            "AWS::CodeBuild::Project": {}
        },
        "search_terms": [
            "codebuild",
            "AWS CodeBuild"
        ],
        "service_label": "AWS CodeBuild",
        "service_name": "codebuild"
    },
    "codecommit": {
        "category": "Developer Tools",
        "resource_types": {
            "AWS::CodeCommit::Repository": {}
        },
        "search_terms": [
            "codecommit",
            "AWS CodeCommit"
        ],
        "service_label": "AWS CodeCommit",
        "service_name": "codecommit"
    },
    "codedeploy": {
        "category": "Developer Tools",
        "resource_types": {
            "AWS::CodeDeploy::Application": {},
            "AWS::CodeDeploy::DeploymentConfig": {},
            "AWS::CodeDeploy::DeploymentGroup": {}
        },
        "search_terms": [
            "codedeploy",
            "AWS CodeDeploy"
        ],
        "service_label": "AWS CodeDeploy",
        "service_name": "codedeploy"
    },
    "codepipeline": {
        "category": "Developer Tools",
        "resource_types": {
            "AWS::CodePipeline::CustomActionType": {},
            "AWS::CodePipeline::Pipeline": {},
            "AWS::CodePipeline::Webhook": {}
        },
        "search_terms": [
            "AWS CodePipeline",
            "codepipeline"
        ],
        "service_label": "AWS CodePipeline",
        "service_name": "codepipeline"
    },
    "cognito": {
        "category": "Mobile Services",
        "resource_types": {
            "AWS::Cognito::IdentityPool": {},
            "AWS::Cognito::IdentityPoolRoleAttachment": {},
            "AWS::Cognito::UserPool": {},
            "AWS::Cognito::UserPoolClient": {},
            "AWS::Cognito::UserPoolGroup": {},
            "AWS::Cognito::UserPoolUser": {},
            "AWS::Cognito::UserPoolUserToGroupAttachment": {}
        },
        "search_terms": [
            "Amazon Cognito",
            "cognito"
        ],
        "service_label": "Amazon Cognito",
        "service_name": "cognito"
    },
    "databasemigrationservice": {
        "category": "Database",
        "resource_types": {
            "AWS::DMS::Certificate": {},
            "AWS::DMS::Endpoint": {},
            "AWS::DMS::EventSubscription": {},
            "AWS::DMS::ReplicationInstance": {},
            "AWS::DMS::ReplicationSubnetGroup": {},
            "AWS::DMS::ReplicationTask": {}
        },
        "search_terms": [
            "databasemigrationservice",
            "dms",
            "AWS Database Migration Service"
        ],
        "service_label": "AWS Database Migration Service",
        "service_name": "databasemigrationservice"
    },
    "datapipeline": {
        "category": "Analytics",
        "resource_types": {
            "AWS::DataPipeline::Pipeline": {}
        },
        "search_terms": [
            "dp",
            "datapipeline",
            "AWS Data Pipeline"
        ],
        "service_label": "AWS Data Pipeline",
        "service_name": "datapipeline"
    },
    "directoryservice": {
        "category": "Security, Identity, and\n                        Compliance\n                     ",
        "resource_types": {
            "AWS::DirectoryService::MicrosoftAD": {},
            "AWS::DirectoryService::SimpleAD": {}
        },
        "search_terms": [
            "AWS Directory Service",
            "ds",
            "directoryservice"
        ],
        "service_label": "AWS Directory Service",
        "service_name": "directoryservice"
    },
    "documentdb": {
        "category": "Database",
        "resource_types": {
            "AWS::DocDB::DBCluster": {},
            "AWS::DocDB::DBClusterParameterGroup": {},
            "AWS::DocDB::DBInstance": {},
            "AWS::DocDB::DBSubnetGroup": {}
        },
        "search_terms": [
            "withmongodbcompatibility",
            "documentdbwithmongodbcompatibilitydocumentdb",
            "Amazon DocumentDB (with MongoDB compatibility) (Amazon DocumentDB)",
            "docdb",
            "documentdb"
        ],
        "service_label": "Amazon DocumentDB (with MongoDB compatibility) (Amazon DocumentDB)",
        "service_name": "documentdb"
    },
    "dynamodb": {
        "category": "Database",
        "resource_types": {
            "AWS::DynamoDB::Table": {}
        },
        "search_terms": [
            "dynamodbdynamodb",
            "dynamodb",
            "Amazon DynamoDB (DynamoDB)"
        ],
        "service_label": "Amazon DynamoDB (DynamoDB)",
        "service_name": "dynamodb"
    },
    "dynamodbaccelerator": {
        "category": "Database",
        "resource_types": {
            "AWS::DAX::Cluster": {},
            "AWS::DAX::ParameterGroup": {},
            "AWS::DAX::SubnetGroup": {}
        },
        "search_terms": [
            "Amazon DynamoDB Accelerator (DAX)",
            "dynamodbaccelerator",
            "dax",
            "da",
            "dynamodbacceleratordax"
        ],
        "service_label": "Amazon DynamoDB Accelerator (DAX)",
        "service_name": "dynamodbaccelerator"
    },
    "ec2autoscaling": {
        "category": "Compute",
        "resource_types": {
            "AWS::AutoScaling::AutoScalingGroup": {},
            "AWS::AutoScaling::LaunchConfiguration": {},
            "AWS::AutoScaling::LifecycleHook": {},
            "AWS::AutoScaling::ScalingPolicy": {},
            "AWS::AutoScaling::ScheduledAction": {}
        },
        "search_terms": [
            "ecautoscaling",
            "eas",
            "Amazon EC2 Auto Scaling",
            "ec2autoscaling",
            "autoscaling"
        ],
        "service_label": "Amazon EC2 Auto Scaling",
        "service_name": "ec2autoscaling"
    },
    "ec2systemsmanager": {
        "category": "Compute",
        "resource_types": {
            "AWS::SSM::Association": {},
            "AWS::SSM::Document": {},
            "AWS::SSM::MaintenanceWindow": {},
            "AWS::SSM::MaintenanceWindowTarget": {},
            "AWS::SSM::MaintenanceWindowTask": {},
            "AWS::SSM::Parameter": {},
            "AWS::SSM::PatchBaseline": {},
            "AWS::SSM::ResourceDataSync": {}
        },
        "search_terms": [
            "ec2systemsmanager",
            "Amazon EC2 Systems Manager (SSM)",
            "ssm",
            "ecsystemsmanagerssm",
            "esm"
        ],
        "service_label": "Amazon EC2 Systems Manager (SSM)",
        "service_name": "ec2systemsmanager"
    },
    "elasticache": {
        "category": "Database",
        "resource_types": {
            "AWS::ElastiCache::CacheCluster": {},
            "AWS::ElastiCache::ParameterGroup": {},
            "AWS::ElastiCache::ReplicationGroup": {},
            "AWS::ElastiCache::SecurityGroup": {},
            "AWS::ElastiCache::SecurityGroupIngress": {},
            "AWS::ElastiCache::SubnetGroup": {}
        },
        "search_terms": [
            "elasticacheelasticache",
            "Amazon ElastiCache (ElastiCache)",
            "elasticache"
        ],
        "service_label": "Amazon ElastiCache (ElastiCache)",
        "service_name": "elasticache"
    },
    "elasticbeanstalk": {
        "category": "Compute",
        "resource_types": {
            "AWS::ElasticBeanstalk::Application": {},
            "AWS::ElasticBeanstalk::ApplicationVersion": {},
            "AWS::ElasticBeanstalk::ConfigurationTemplate": {},
            "AWS::ElasticBeanstalk::Environment": {}
        },
        "search_terms": [
            "eb",
            "elasticbeanstalk",
            "AWS Elastic Beanstalk (Elastic Beanstalk)",
            "elasticbeanstalkelasticbeanstalk"
        ],
        "service_label": "AWS Elastic Beanstalk (Elastic Beanstalk)",
        "service_name": "elasticbeanstalk"
    },
    "elasticblockstore": {
        "category": "Storage and Content Delivery",
        "resource_types": {
            "AWS::EC2::Volume": {},
            "AWS::EC2::VolumeAttachment": {}
        },
        "search_terms": [
            "Amazon Elastic Block Store (Amazon EBS)",
            "ec2",
            "elasticblockstore",
            "elasticblockstoreebs",
            "ebs"
        ],
        "service_label": "Amazon Elastic Block Store (Amazon EBS)",
        "service_name": "elasticblockstore"
    },
    "elasticcomputecloud": {
        "category": "Compute",
        "resource_types": {
            "AWS::EC2::Host": {},
            "AWS::EC2::Instance": {},
            "AWS::EC2::LaunchTemplate": {},
            "AWS::EC2::PlacementGroup": {},
            "AWS::EC2::SpotFleet": {},
            "AWS::EC2::TransitGateway": {},
            "AWS::EC2::TransitGatewayAttachment": {},
            "AWS::EC2::TransitGatewayRoute": {},
            "AWS::EC2::TransitGatewayRouteTable": {},
            "AWS::EC2::TransitGatewayRouteTableAssociation": {},
            "AWS::EC2::TransitGatewayRouteTablePropagation": {},
            "AWS::EC2::VPCEndpointServicePermissions": {},
            "AWS::EC2::VPCPeeringConnection": {}
        },
        "search_terms": [
            "ec2",
            "elasticcomputecloud",
            "Amazon Elastic Compute Cloud (Amazon EC2)",
            "elasticcomputecloudec",
            "ecc"
        ],
        "service_label": "Amazon Elastic Compute Cloud (Amazon EC2)",
        "service_name": "elasticcomputecloud"
    },
    "elasticcontainerregistry": {
        "category": "Compute",
        "resource_types": {
            "AWS::ECR::Repository": {}
        },
        "search_terms": [
            "ecr",
            "elasticcontainerregistryecr",
            "elasticcontainerregistry",
            "Amazon Elastic Container Registry (Amazon ECR)"
        ],
        "service_label": "Amazon Elastic Container Registry (Amazon ECR)",
        "service_name": "elasticcontainerregistry"
    },
    "elasticcontainerservice": {
        "category": "Compute",
        "resource_types": {
            "AWS::ECS::Cluster": {},
            "AWS::ECS::Service": {},
            "AWS::ECS::TaskDefinition": {}
        },
        "search_terms": [
            "ecs",
            "elasticcontainerserviceecs",
            "Amazon Elastic Container Service (Amazon ECS)",
            "elasticcontainerservice"
        ],
        "service_label": "Amazon Elastic Container Service (Amazon ECS)",
        "service_name": "elasticcontainerservice"
    },
    "elasticcontainerserviceforkubernetes": {
        "category": "Compute",
        "resource_types": {
            "AWS::EKS::Cluster": {}
        },
        "search_terms": [
            "elasticcontainerserviceforkubernetes",
            "Amazon Elastic Container Service for Kubernetes",
            "ecsfk",
            "eks"
        ],
        "service_label": "Amazon Elastic Container Service for Kubernetes",
        "service_name": "elasticcontainerserviceforkubernetes"
    },
    "elasticfilesystem": {
        "category": "Storage and Content Delivery",
        "resource_types": {
            "AWS::EFS::FileSystem": {},
            "AWS::EFS::MountTarget": {}
        },
        "search_terms": [
            "elasticfilesystem",
            "elasticfilesystemefs",
            "efs",
            "Amazon Elastic File System (Amazon EFS)"
        ],
        "service_label": "Amazon Elastic File System (Amazon EFS)",
        "service_name": "elasticfilesystem"
    },
    "elasticloadbalancing": {
        "category": "Compute",
        "resource_types": {
            "AWS::ElasticLoadBalancing::LoadBalancer": {},
            "AWS::ElasticLoadBalancingV2::Listener": {},
            "AWS::ElasticLoadBalancingV2::ListenerCertificate": {},
            "AWS::ElasticLoadBalancingV2::ListenerRule": {},
            "AWS::ElasticLoadBalancingV2::LoadBalancer": {},
            "AWS::ElasticLoadBalancingV2::TargetGroup": {}
        },
        "search_terms": [
            "Elastic Load Balancing",
            "elb",
            "elasticloadbalancingv2",
            "elasticloadbalancing"
        ],
        "service_label": "Elastic Load Balancing",
        "service_name": "elasticloadbalancing"
    },
    "elasticsearchservice": {
        "category": "Analytics",
        "resource_types": {
            "AWS::Elasticsearch::Domain": {}
        },
        "search_terms": [
            "es",
            "elasticsearchservicees",
            "Amazon Elasticsearch Service (Amazon ES)",
            "elasticsearchservice",
            "elasticsearch"
        ],
        "service_label": "Amazon Elasticsearch Service (Amazon ES)",
        "service_name": "elasticsearchservice"
    },
    "emr": {
        "category": "Analytics",
        "resource_types": {
            "AWS::EMR::Cluster": {},
            "AWS::EMR::InstanceFleetConfig": {},
            "AWS::EMR::InstanceGroupConfig": {},
            "AWS::EMR::SecurityConfiguration": {},
            "AWS::EMR::Step": {}
        },
        "search_terms": [
            "emr",
            "Amazon EMR (Amazon EMR)",
            "emremr"
        ],
        "service_label": "Amazon EMR (Amazon EMR)",
        "service_name": "emr"
    },
    "fsx": {
        "category": "Storage and Content Delivery",
        "resource_types": {
            "AWS::FSx::FileSystem": {}
        },
        "search_terms": [
            "Amazon FSx",
            "fsx"
        ],
        "service_label": "Amazon FSx",
        "service_name": "fsx"
    },
    "gamelift": {
        "category": "Game Development",
        "resource_types": {
            "AWS::GameLift::Alias": {},
            "AWS::GameLift::Build": {},
            "AWS::GameLift::Fleet": {}
        },
        "search_terms": [
            "Amazon GameLift (GameLift)",
            "gameliftgamelift",
            "gamelift"
        ],
        "service_label": "Amazon GameLift (GameLift)",
        "service_name": "gamelift"
    },
    "glue": {
        "category": "Analytics",
        "resource_types": {
            "AWS::Glue::Classifier": {},
            "AWS::Glue::Connection": {},
            "AWS::Glue::Crawler": {},
            "AWS::Glue::Database": {},
            "AWS::Glue::DevEndpoint": {},
            "AWS::Glue::Job": {},
            "AWS::Glue::Partition": {},
            "AWS::Glue::Table": {},
            "AWS::Glue::Trigger": {}
        },
        "search_terms": [
            "AWS Glue",
            "glue"
        ],
        "service_label": "AWS Glue",
        "service_name": "glue"
    },
    "guardduty": {
        "category": "Security, Identity, and\n                        Compliance\n                     ",
        "resource_types": {
            "AWS::GuardDuty::Detector": {},
            "AWS::GuardDuty::Filter": {},
            "AWS::GuardDuty::IPSet": {},
            "AWS::GuardDuty::Master": {},
            "AWS::GuardDuty::Member": {},
            "AWS::GuardDuty::ThreatIntelSet": {}
        },
        "search_terms": [
            "guardduty",
            "Amazon GuardDuty"
        ],
        "service_label": "Amazon GuardDuty",
        "service_name": "guardduty"
    },
    "identityandaccessmanagement": {
        "category": "Security, Identity, and\n                        Compliance\n                     ",
        "resource_types": {
            "AWS::IAM::AccessKey": {},
            "AWS::IAM::Group": {},
            "AWS::IAM::InstanceProfile": {},
            "AWS::IAM::ManagedPolicy": {},
            "AWS::IAM::Policy": {},
            "AWS::IAM::Role": {},
            "AWS::IAM::User": {},
            "AWS::IAM::UserToGroupAddition": {}
        },
        "search_terms": [
            "AWS Identity and Access Management (IAM)",
            "identityandaccessmanagementiam",
            "iaam",
            "iam",
            "identityandaccessmanagement"
        ],
        "service_label": "AWS Identity and Access Management (IAM)",
        "service_name": "identityandaccessmanagement"
    },
    "inspector": {
        "category": "Security, Identity, and\n                        Compliance\n                     ",
        "resource_types": {
            "AWS::Inspector::AssessmentTarget": {},
            "AWS::Inspector::AssessmentTemplate": {},
            "AWS::Inspector::ResourceGroup": {}
        },
        "search_terms": [
            "inspector",
            "Amazon Inspector"
        ],
        "service_label": "Amazon Inspector",
        "service_name": "inspector"
    },
    "iot": {
        "category": "Internet of Things",
        "resource_types": {
            "AWS::IoT::Certificate": {},
            "AWS::IoT::Policy": {},
            "AWS::IoT::PolicyPrincipalAttachment": {},
            "AWS::IoT::Thing": {},
            "AWS::IoT::ThingPrincipalAttachment": {},
            "AWS::IoT::TopicRule": {}
        },
        "search_terms": [
            "iot",
            "AWS IoT"
        ],
        "service_label": "AWS IoT",
        "service_name": "iot"
    },
    "iot1click": {
        "category": "Internet of Things",
        "resource_types": {
            "AWS::IoT1Click::Device": {},
            "AWS::IoT1Click::Placement": {},
            "AWS::IoT1Click::Project": {}
        },
        "search_terms": [
            "iotclick",
            "iot1click",
            "iot1-click",
            "AWS IoT 1-Click",
            "ic"
        ],
        "service_label": "AWS IoT 1-Click",
        "service_name": "iot1click"
    },
    "iotanalytics": {
        "category": "Internet of Things",
        "resource_types": {
            "AWS::IoTAnalytics::Channel": {},
            "AWS::IoTAnalytics::Dataset": {},
            "AWS::IoTAnalytics::Datastore": {},
            "AWS::IoTAnalytics::Pipeline": {}
        },
        "search_terms": [
            "ia",
            "AWS IoT Analytics",
            "iotanalytics"
        ],
        "service_label": "AWS IoT Analytics",
        "service_name": "iotanalytics"
    },
    "keymanagementservice": {
        "category": "Security, Identity, and\n                        Compliance\n                     ",
        "resource_types": {
            "AWS::KMS::Alias": {},
            "AWS::KMS::Key": {}
        },
        "search_terms": [
            "kms",
            "keymanagementservice",
            "keymanagementservicekms",
            "AWS Key Management Service (AWS KMS)"
        ],
        "service_label": "AWS Key Management Service (AWS KMS)",
        "service_name": "keymanagementservice"
    },
    "kinesis": {
        "category": "Analytics",
        "resource_types": {
            "AWS::Kinesis::Stream": {},
            "AWS::Kinesis::StreamConsumer": {},
            "AWS::KinesisAnalytics::Application": {},
            "AWS::KinesisAnalytics::ApplicationOutput": {},
            "AWS::KinesisAnalytics::ApplicationReferenceDataSource": {},
            "AWS::KinesisFirehose::DeliveryStream": {}
        },
        "search_terms": [
            "Amazon Kinesis",
            "kinesis",
            "kinesisanalytics",
            "kinesisfirehose"
        ],
        "service_label": "Amazon Kinesis",
        "service_name": "kinesis"
    },
    "lambda": {
        "category": "Compute",
        "resource_types": {
            "AWS::Lambda::Alias": {},
            "AWS::Lambda::EventSourceMapping": {},
            "AWS::Lambda::Function": {},
            "AWS::Lambda::LayerVersion": {},
            "AWS::Lambda::LayerVersionPermission": {},
            "AWS::Lambda::Permission": {},
            "AWS::Lambda::Version": {}
        },
        "search_terms": [
            "lambdalambda",
            "lambda",
            "AWS Lambda (Lambda)"
        ],
        "service_label": "AWS Lambda (Lambda)",
        "service_name": "lambda"
    },
    "mq": {
        "category": "Application Services",
        "resource_types": {
            "AWS::AmazonMQ::Broker": {},
            "AWS::AmazonMQ::Configuration": {},
            "AWS::AmazonMQ::ConfigurationAssociation": {}
        },
        "search_terms": [
            "Amazon MQ",
            "amazonmq",
            "mq"
        ],
        "service_label": "Amazon MQ",
        "service_name": "mq"
    },
    "neptune": {
        "category": "Database",
        "resource_types": {
            "AWS::Neptune::DBCluster": {},
            "AWS::Neptune::DBClusterParameterGroup": {},
            "AWS::Neptune::DBInstance": {},
            "AWS::Neptune::DBParameterGroup": {},
            "AWS::Neptune::DBSubnetGroup": {}
        },
        "search_terms": [
            "Amazon Neptune (Neptune)",
            "neptuneneptune",
            "neptune"
        ],
        "service_label": "Amazon Neptune (Neptune)",
        "service_name": "neptune"
    },
    "redshift": {
        "category": "Database",
        "resource_types": {
            "AWS::Redshift::Cluster": {},
            "AWS::Redshift::ClusterParameterGroup": {},
            "AWS::Redshift::ClusterSecurityGroup": {},
            "AWS::Redshift::ClusterSecurityGroupIngress": {},
            "AWS::Redshift::ClusterSubnetGroup": {}
        },
        "search_terms": [
            "Amazon Redshift",
            "redshift"
        ],
        "service_label": "Amazon Redshift",
        "service_name": "redshift"
    },
    "relationaldatabaseservice": {
        "category": "Database",
        "resource_types": {
            "AWS::RDS::DBCluster": {},
            "AWS::RDS::DBClusterParameterGroup": {},
            "AWS::RDS::DBInstance": {},
            "AWS::RDS::DBParameterGroup": {},
            "AWS::RDS::DBSecurityGroup": {},
            "AWS::RDS::DBSecurityGroupIngress": {},
            "AWS::RDS::DBSubnetGroup": {},
            "AWS::RDS::EventSubscription": {},
            "AWS::RDS::OptionGroup": {}
        },
        "search_terms": [
            "relationaldatabaseservicerds",
            "relationaldatabaseservice",
            "rds",
            "Amazon Relational Database Service (Amazon RDS)"
        ],
        "service_label": "Amazon Relational Database Service (Amazon RDS)",
        "service_name": "relationaldatabaseservice"
    },
    "resourceaccessmanager": {
        "category": "Security, Identity, and\n                        Compliance\n                     ",
        "resource_types": {
            "AWS::RAM::ResourceShare": {}
        },
        "search_terms": [
            "ram",
            "resourceaccessmanagerram",
            "AWS Resource Access Manager (AWS RAM)",
            "resourceaccessmanager"
        ],
        "service_label": "AWS Resource Access Manager (AWS RAM)",
        "service_name": "resourceaccessmanager"
    },
    "robomaker": {
        "category": "Robotics",
        "resource_types": {
            "AWS::RoboMaker::Fleet": {},
            "AWS::RoboMaker::Robot": {},
            "AWS::RoboMaker::RobotApplication": {},
            "AWS::RoboMaker::RobotApplicationVersion": {},
            "AWS::RoboMaker::SimulationApplication": {},
            "AWS::RoboMaker::SimulationApplicationVersion": {}
        },
        "search_terms": [
            "robomaker",
            "RoboMaker"
        ],
        "service_label": "RoboMaker",
        "service_name": "robomaker"
    },
    "route53": {
        "category": "Networking",
        "resource_types": {
            "AWS::Route53::HealthCheck": {},
            "AWS::Route53::HostedZone": {},
            "AWS::Route53::RecordSet": {},
            "AWS::Route53::RecordSetGroup": {},
            "AWS::Route53Resolver::ResolverEndpoint": {},
            "AWS::Route53Resolver::ResolverRule": {},
            "AWS::Route53Resolver::ResolverRuleAssociation": {}
        },
        "search_terms": [
            "route\u00a053",
            "route",
            "route53",
            "route53resolver",
            "Amazon Route\u00a053"
        ],
        "service_label": "Amazon Route\u00a053",
        "service_name": "route53"
    },
    "sagemaker": {
        "category": "Machine Learning",
        "resource_types": {
            "AWS::SageMaker::Endpoint": {},
            "AWS::SageMaker::EndpointConfig": {},
            "AWS::SageMaker::Model": {},
            "AWS::SageMaker::NotebookInstance": {},
            "AWS::SageMaker::NotebookInstanceLifecycleConfig": {}
        },
        "search_terms": [
            "sagemaker",
            "Amazon SageMaker"
        ],
        "service_label": "Amazon SageMaker",
        "service_name": "sagemaker"
    },
    "secretsmanager": {
        "category": "Security, Identity, and\n                        Compliance\n                     ",
        "resource_types": {
            "AWS::SecretsManager::ResourcePolicy": {},
            "AWS::SecretsManager::RotationSchedule": {},
            "AWS::SecretsManager::Secret": {},
            "AWS::SecretsManager::SecretTargetAttachment": {}
        },
        "search_terms": [
            "AWS Secrets Manager (Secrets Manager)",
            "secretsmanagersecretsmanager",
            "secretsmanager",
            "sm"
        ],
        "service_label": "AWS Secrets Manager (Secrets Manager)",
        "service_name": "secretsmanager"
    },
    "simpledb": {
        "category": "Database",
        "resource_types": {
            "AWS::SDB::Domain": {}
        },
        "search_terms": [
            "simpledb",
            "Amazon SimpleDB",
            "sdb"
        ],
        "service_label": "Amazon SimpleDB",
        "service_name": "simpledb"
    },
    "simpleemailservice": {
        "category": "Customer Engagement",
        "resource_types": {
            "AWS::SES::ConfigurationSet": {},
            "AWS::SES::ConfigurationSetEventDestination": {},
            "AWS::SES::ReceiptFilter": {},
            "AWS::SES::ReceiptRule": {},
            "AWS::SES::ReceiptRuleSet": {},
            "AWS::SES::Template": {}
        },
        "search_terms": [
            "ses",
            "Amazon Simple Email Service (Amazon SES)",
            "simpleemailserviceses",
            "simpleemailservice"
        ],
        "service_label": "Amazon Simple Email Service (Amazon SES)",
        "service_name": "simpleemailservice"
    },
    "simplenotificationservice": {
        "category": "Mobile Services",
        "resource_types": {
            "AWS::SNS::Subscription": {},
            "AWS::SNS::Topic": {},
            "AWS::SNS::TopicPolicy": {}
        },
        "search_terms": [
            "simplenotificationservice",
            "sns",
            "simplenotificationservicesns",
            "Amazon Simple Notification Service (Amazon SNS)"
        ],
        "service_label": "Amazon Simple Notification Service (Amazon SNS)",
        "service_name": "simplenotificationservice"
    },
    "simplequeueservice": {
        "category": "Application Services",
        "resource_types": {
            "AWS::SQS::Queue": {},
            "AWS::SQS::QueuePolicy": {}
        },
        "search_terms": [
            "sqs",
            "simplequeueservicesqs",
            "Amazon Simple Queue Service (Amazon SQS)",
            "simplequeueservice"
        ],
        "service_label": "Amazon Simple Queue Service (Amazon SQS)",
        "service_name": "simplequeueservice"
    },
    "simplestorageservice": {
        "category": "Storage and Content Delivery",
        "resource_types": {
            "AWS::S3::Bucket": {},
            "AWS::S3::BucketPolicy": {}
        },
        "search_terms": [
            "Amazon Simple Storage Service (Amazon S3)",
            "simplestorageservices",
            "sss",
            "simplestorageservice",
            "s3"
        ],
        "service_label": "Amazon Simple Storage Service (Amazon S3)",
        "service_name": "simplestorageservice"
    },
    "stepfunctions": {
        "category": "Application Services",
        "resource_types": {
            "AWS::StepFunctions::Activity": {},
            "AWS::StepFunctions::StateMachine": {}
        },
        "search_terms": [
            "AWS Step Functions (Step Functions)",
            "stepfunctions",
            "sf",
            "stepfunctionsstepfunctions"
        ],
        "service_label": "AWS Step Functions (Step Functions)",
        "service_name": "stepfunctions"
    },
    "virtualprivatecloud": {
        "category": "Networking",
        "resource_types": {
            "AWS::EC2::CustomerGateway": {},
            "AWS::EC2::DHCPOptions": {},
            "AWS::EC2::EC2Fleet": {},
            "AWS::EC2::EIP": {},
            "AWS::EC2::EIPAssociation": {},
            "AWS::EC2::EgressOnlyInternetGateway": {},
            "AWS::EC2::FlowLog": {},
            "AWS::EC2::InternetGateway": {},
            "AWS::EC2::NatGateway": {},
            "AWS::EC2::NetworkAcl": {},
            "AWS::EC2::NetworkAclEntry": {},
            "AWS::EC2::NetworkInterface": {},
            "AWS::EC2::NetworkInterfaceAttachment": {},
            "AWS::EC2::NetworkInterfacePermission": {},
            "AWS::EC2::Route": {},
            "AWS::EC2::RouteTable": {},
            "AWS::EC2::SecurityGroup": {},
            "AWS::EC2::SecurityGroupEgress": {},
            "AWS::EC2::SecurityGroupIngress": {},
            "AWS::EC2::Subnet": {},
            "AWS::EC2::SubnetCidrBlock": {},
            "AWS::EC2::SubnetNetworkAclAssociation": {},
            "AWS::EC2::SubnetRouteTableAssociation": {},
            "AWS::EC2::VPC": {},
            "AWS::EC2::VPCCidrBlock": {},
            "AWS::EC2::VPCDHCPOptionsAssociation": {},
            "AWS::EC2::VPCEndpoint": {},
            "AWS::EC2::VPCGatewayAttachment": {},
            "AWS::EC2::VPCPeeringConnection": {},
            "AWS::EC2::VPNConnection": {},
            "AWS::EC2::VPNConnectionRoute": {},
            "AWS::EC2::VPNGateway": {},
            "AWS::EC2::VPNGatewayRoutePropagation": {}
        },
        "search_terms": [
            "Amazon Virtual Private Cloud (Amazon VPC)",
            "virtualprivatecloudvpc",
            "vpc",
            "ec2",
            "virtualprivatecloud"
        ],
        "service_label": "Amazon Virtual Private Cloud (Amazon VPC)",
        "service_name": "virtualprivatecloud"
    },
    "waf": {
        "category": "Security, Identity, and\n                        Compliance\n                     ",
        "resource_types": {
            "AWS::WAF::ByteMatchSet": {},
            "AWS::WAF::IPSet": {},
            "AWS::WAF::Rule": {},
            "AWS::WAF::SizeConstraintSet": {},
            "AWS::WAF::SqlInjectionMatchSet": {},
            "AWS::WAF::WebACL": {},
            "AWS::WAF::XssMatchSet": {},
            "AWS::WAFRegional::ByteMatchSet": {},
            "AWS::WAFRegional::IPSet": {},
            "AWS::WAFRegional::Rule": {},
            "AWS::WAFRegional::SizeConstraintSet": {},
            "AWS::WAFRegional::SqlInjectionMatchSet": {},
            "AWS::WAFRegional::WebACL": {},
            "AWS::WAFRegional::WebACLAssociation": {},
            "AWS::WAFRegional::XssMatchSet": {}
        },
        "search_terms": [
            "waf",
            "wafregional",
            "AWS WAF"
        ],
        "service_label": "AWS WAF",
        "service_name": "waf"
    },
    "workspaces": {
        "category": "Enterprise Applications",
        "resource_types": {
            "AWS::WorkSpaces::Workspace": {}
        },
        "search_terms": [
            "workspaces",
            "Amazon WorkSpaces"
        ],
        "service_label": "Amazon WorkSpaces",
        "service_name": "workspaces"
    }
}